
// THIS FILE IS AUTOGENERATED - DO NOT EDIT
var path = require('path')
var fs = require('fs')
var rules = require('./rules.js');
var modules = [path.resolve('../node_modules/')];

var HtmlWebpackPlugin = require('html-webpack-plugin');
var ESLintPlugin = require('eslint-webpack-plugin');
const CopyPlugin = require("copy-webpack-plugin");
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;

var webpack = require('webpack');
const { Target } = require('puppeteer');

const dist = path.resolve(__dirname, './dist');

module.exports = {
  mode: 'development',
  devtool: 'source-map',
  plugins: [
    new ESLintPlugin(),
    new HtmlWebpackPlugin({
      template: path.join(__dirname,'./pages/upload/template.html'),
      filename: 'index.html',
      chunks:['upload']
    }),
    new HtmlWebpackPlugin({
      template: path.join(__dirname,'./pages/result/template.html'),
      filename: 'result.html',
      chunks:['result']
    }),
    new webpack.DefinePlugin({
      __BASE_PATH__: "''",
    }),
    new CopyPlugin({
      patterns: [
        {
          from:
            '../node_modules/@cornerstonejs/dicom-image-loader/dist/dynamic-import',
          to: dist,
        },
      ],
    }),
    // new BundleAnalyzerPlugin()
  ],
  // entry: path.join(__dirname,'index.ts'),
  entry: {
    upload:path.join(__dirname,'./pages/upload/index.ts'),
    result:path.join(__dirname,'./pages/result/index.ts')
  },
  output: {
    path: dist,
    filename: './[name][contenthash].js',
  },
  module: {
    rules,
  },
  experiments: {
    asyncWebAssembly: true
  },
  resolve: {
    alias: {
      '@cornerstonejs/core': path.join(__dirname,'../packages/core/src/index'),
      '@cornerstonejs/tools': path.join(__dirname,'../packages/tools/src/index'),
      '@cornerstonejs/nifti-volume-loader': path.join(__dirname,'../packages/nifti-volume-loader/src/index'),
      '@cornerstonejs/adapters': path.join(__dirname,'../packages/adapters/src/index'),
      '@cornerstonejs/streaming-image-volume-loader': path.join(__dirname,'..//packages//streaming-image-volume-loader//src//index'),
      // We use this alias and the CopyPlugin to support using the dynamic-import version
      // of WADO Image Loader
      '@cornerstonejs/dicom-image-loader': path.join(__dirname,'../packages/dicomImageLoader/dist/dynamic-import/cornerstoneDICOMImageLoader.min.js'),
      '@cornerstonejs/helpers': path.join(__dirname,'../utils/demo/helpers'),
      '$nifits': path.join(__dirname,'../nifti'),
    },
    modules,
    extensions: ['.ts', '.tsx', '.js', '.jsx'],
    fallback: {
      fs: false,
      path: require.resolve('path-browserify'),
      events: false
    },
  },
  devServer: {
    hot: true,
    open: false,
    port: 8080,
    allowedHosts: 'all',
    historyApiFallback: true,
    https:{
      key: fs.readFileSync(path.resolve(__dirname, "./https/192.168.28.180+3-key.pem")),
      cert: fs.readFileSync(path.resolve(__dirname, "./https/192.168.28.180+3.pem")),
    },
    host:'0.0.0.0',
    headers: {
      "Cross-Origin-Embedder-Policy": "require-corp",
      "Cross-Origin-Opener-Policy": "same-origin"
    },
    historyApiFallback: {
      rewrites: [
        { from: "result", to: '/result.html' },
      ],
    },
  },
  /*optimization: {
    minimize: false,
    usedExports: true,
    sideEffects: true
  }*/
};
